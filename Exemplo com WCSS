{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyO+bcaktwjfQamwIWSmkxoH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/allenborges/algoritmoKMEANS/blob/master/Exemplo%20com%20WCSS\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JTsFNHdzIFh7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 622
        },
        "outputId": "c38c17dc-14be-40b7-9eb7-f7b768126a2f"
      },
      "source": [
        "# Exemplo com dados aleat√≥rios\n",
        "import numpy as np\n",
        "from matplotlib import pyplot as plt\n",
        "from sklearn.datasets import make_blobs\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "X,y= make_blobs(n_samples=500, centers=50, random_state=0)\n",
        "plt.scatter(X[:,0], X[:,1])\n",
        "wcss=[]\n",
        "for i in range(1, 20):\n",
        "  kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10)\n",
        "  kmeans.fit(X)\n",
        "  wcss.append(kmeans.inertia_)\n",
        "  plt.plot(range(1, 20), wcss)\n",
        "  plt.title('Elbow Method')\n",
        "  plt.xlabel('Number of clusters')\n",
        "  plt.ylabel('WCSS')\n",
        "  plt.show()\n",
        "  kmeans= KMeans(n_clusters=4, init='k-means++', max_iter=300, n_init=10, range=0)\n",
        "  pred_y = kmeans.fit_predict(X)\n",
        "  plt.scatter(X[:, 0],X[:, 1], c=pred_y)\n",
        "  plt.scatter(kmeans.cluster_centers_[:, 0],kmeans.n_clusters_centrs[:,1], s=50,c='red')\n",
        "  plt.show()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-25-e1496ba01ba9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m   \u001b[0mkmeans\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m   \u001b[0mwcss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkmeans\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minertia_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwcss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Elbow Method'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Number of clusters'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2761\u001b[0m     return gca().plot(\n\u001b[1;32m   2762\u001b[0m         *args, scalex=scalex, scaley=scaley, **({\"data\": data} if data\n\u001b[0;32m-> 2763\u001b[0;31m         is not None else {}), **kwargs)\n\u001b[0m\u001b[1;32m   2764\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2765\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1644\u001b[0m         \"\"\"\n\u001b[1;32m   1645\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalize_kwargs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLine2D\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1646\u001b[0;31m         \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1647\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlines\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1648\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    214\u001b[0m                 \u001b[0mthis\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m             \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_plot_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_next_color\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_plot_args\u001b[0;34m(self, tup, kwargs)\u001b[0m\n\u001b[1;32m    340\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 342\u001b[0;31m             raise ValueError(f\"x and y must have same first dimension, but \"\n\u001b[0m\u001b[1;32m    343\u001b[0m                              f\"have shapes {x.shape} and {y.shape}\")\n\u001b[1;32m    344\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: x and y must have same first dimension, but have shapes (19,) and (1,)"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}